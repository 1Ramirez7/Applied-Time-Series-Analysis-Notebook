{
  "hash": "51e191b3c989c13db4617524974e382c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Chapter 4 r code examples and practice\"\nsubtitle: \"\"\nformat: \n  html:\n    error: false\n    message: false\n    warning: false\n    embed-resources: true\n    toc: true\n    code-fold: false\n---\n\n\n\n\nThis chapter is not finished. \n\n# Lesson 4 - 1 code\n\n## Visualizing White Noise\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\nspacer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1\n\n\nfile_path <- \"../data/white_noise.parquet\"\n\n# ../data goes back one level. ../../data goes back two folders\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# straight from lesson code\n# This code was used to create the white noise data file\n\n# Set random seed\nset.seed(10)\n\n# Specify means and standard deviation\nn <- 2500                           # number of points\nwhite_noise_sigma <- rnorm(1, 5, 1) # choose a random standard deviation\n\n# Simulate normal data\n# data.frame(x = rnorm(n, 0, white_noise_sigma)) |>\n#   rio::export(\"../data/white_noise.parquettest\") # uncomment this two lines to run\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2\n\n\n# White noise data\ndf0 <- rio::import(file_path)\n```\n:::\n\n\n\n\n**name changes**\n\nchunk 3: white_noise_df = df0\n\nchunk 4: x = v1\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 3\n# words b/ code: The first 250 points in this time....\n\ndf1 <- df0 |> # this code updates names, but now t = x. and x is y in latter codes so keep that in mind.\n  mutate(t = 1:nrow(df0)) |>\n  rename(x = t, v1 = x) # rename this, original code had those names for x and y. now just x and y\n\ndf1 |> # original, but this code does not rename or change df. \n  head(250) |>  \n  ggplot(aes(x = x, y = v1)) + \n    geom_line() +\n    theme_bw() +\n    labs(\n      x = \"Time\",\n      y = \"Values\",\n      title = \"First 250 Values of a Gaussian White Noise Time Series\"\n    ) +\n    theme(\n      plot.title = element_text(hjust = 0.5)\n    )\n```\n\n::: {.cell-output-display}\n![](chapter_4_overview_code_draft_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  acf(df1$v1, type = \"covariance\") # doing this in class to get to the density plot below\n```\n\n::: {.cell-output-display}\n![](chapter_4_overview_code_draft_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n\n```{.r .cell-code}\n  acf(df1$v1, type = \"correlation\") # use this acf samples from previous lesson. \n```\n\n::: {.cell-output-display}\n![](chapter_4_overview_code_draft_files/figure-html/unnamed-chunk-5-3.png){width=672}\n:::\n:::\n\n\n\n\nspacer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 4.1 - 4\n# words before code: Here is a histogram of the 2500 values from....\n\n# this x is the variable, but not necessarily the x axis variable. x is y here \ndf1 |>\n  mutate(density = dnorm(v1, mean(df1$v1), sd(df1$v1))) |>\n  ggplot(aes(x = v1)) +\n    geom_histogram(aes(y = after_stat(density)),\n        color = \"white\", fill = \"#56B4E9\", binwidth = 1) +\n    geom_line(aes(x = v1, y = density)) +\n    theme_bw() +\n    labs(\n      x = \"Values or variable 1\",\n      y = \"Frequency\",\n      title = \"Histogram of Values from a Gaussian White Noise Process\"\n    ) +\n    theme(\n      plot.title = element_text(hjust = 0.5)\n    )\n```\n\n::: {.cell-output-display}\n![](chapter_4_overview_code_draft_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# left off in this histogram code because the differences between the y and x names is confusing. I need to just hard edit the code to clearly define the variable and avoid the name changes. I just need to make sure I take note of it.\n```\n:::\n\n\n\n\n**Random Walk Cumulative Sum**\n\nname changes\n\ny = v2\n\nthe x in this code refers to the x - axis values. This code is meant for when the x axis values are number of observations (eg. 1-60). Dates can maybe work, but anything else can cause troubles.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 4.1 - 5\n# sample code to simulate a random walk\n# words b/ code: Complete steps 2 and 3 a total of\n\n# set.seed(7)\n\ndf2 <- df1 |>\n  # mutate(w = ifelse(row_number() == 1, 0, sample(c(-1,1), size = 60, replace = TRUE))) |> # generates coin flips, but no longer needed for chapter model\n  mutate(v2 = cumsum(v1)) # creates cumulitve v2 column\n\nggplot(data=df2, aes(x=x, y=v2)) +\n  # geom_point(data = df2, aes(x=x, y=v2), size = 0.01) +\n  geom_line() +\n  geom_point(size = 0.5) +\n  # scale_x_continuous(limits = c(0,60), # limits to only 60 obs\n  #                    breaks = seq(0, 60, by = 5),\n  #                    minor_breaks = seq(0, 60, 1)) +\n  # scale_y_continuous(limits = c(-20,20),\n  #                    breaks = seq(-20, 20, by = 5),\n  #                    minor_breaks = seq(-20, 20, 1)) +\n  labs(\n      x = \"Toss Number\",\n      y = expression(paste(\"$x_t$\")),\n      title = \"Cumulative Results of Coin Tosses\" # cum results (v2) of v1. \n  ) +\n  theme_minimal() +\n  theme(\n    panel.grid.major = element_line(colour = \"black\")\n  ) +\n  theme(\n    plot.title = element_text(hjust = 0.5)\n  )\n```\n\n::: {.cell-output-display}\n![](chapter_4_overview_code_draft_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\nspacer\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 4.1 - 6 \n# words b/ code: be a time series with the following values.\n\nset.seed(6)\nn <- 8\nd_operator <- data.frame(t = c(1:n), x = sample(1:15, n, replace = FALSE)) |>\n  mutate(diff = t - n) # what is this code doing. right now is its doing t - n. n is always the set 8, and t is just the number of observations. so if n is 8, then the first t- n is -7, second is -6 and so on, but this is just using the number/date assigned to the actual variable. its like comparing hot days when only using the data, but not the temperature. so what is this code doing exactly????\n\n#cat( paste( paste0(\"$x_{t\", ifelse(d_operator$t==n,\"\",d_operator$t-n), \"} = \", d_operator$x, \"$\"), collapse = \",$~$ \" ) ) \n\ncat( paste( paste0(\"$x_{\", d_operator$t, \"} = \", d_operator$x, \"$\"), collapse = \",$~$ \" ) ) \n\n# Computes the value of the \"power_on_d\"^th difference from x_n\nd_value <- function(power_on_d = 0) {\n  out <- d_operator |> #### Note the use of this global variable\n    filter(diff == -power_on_d) |>\n    dplyr::select(x) |>\n    pull()\n  \n  return(out)\n}\n\n\nts_val <- function(t_value) {\n  out <- d_operator |> #### Note the use of this global variable\n    filter(t == t_value) |>\n    dplyr::select(x) |>\n    pull()\n  \n  return(out)\n}\n\n# this code below was the last r chunk for lesson 4-1, but it is not needed since it is in this r chunk. This r chunk is set not to evaluate for class. \n\n#cat( paste( paste0(\"$x_{\", d_operator$t, \"} = \", d_operator$x, \"$\"), collapse = \",$~$ \" ) )\n```\n:::\n\n\n\n\nspacer\n\nThis is solution to backwards shift operator so formula for this code is done in a previous r chunk.\n\n# Lesson 4 - 2 code\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 4.2 - 1 \n\n# Set symbol and date range\nsymbol <- \"MCD\"\ncompany <- \"McDonald's\"\ndate_start <- \"2020-07-01\"\ndate_end <- \"2024-01-01\"\n\n# Fetch stock prices (can be used to get new data)\nstock_df <- tq_get(symbol, from = date_start, to = date_end, get = \"stock.prices\")\n\n# Transform data into tsibble\nstock_ts <- stock_df %>%\n  mutate(\n    dates = date, \n    value = adjusted\n  ) %>%\n  dplyr::select(dates, value) %>%\n  as_tibble() %>% \n  arrange(dates) |>\n  mutate(diff = value - lag(value)) |>\n  as_tsibble(index = dates, key = NULL)\n```\n:::\n",
    "supporting": [
      "chapter_4_overview_code_draft_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}