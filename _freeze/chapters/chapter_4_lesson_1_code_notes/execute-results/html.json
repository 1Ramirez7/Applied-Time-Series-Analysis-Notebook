{
  "hash": "71bbd0bdef561391ff6bafb654ff23e6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ch 4.1 Code Notes\"\nsubtitle: \"White Noise and Random Walks - Part 1\"\nformat: \n  html:\n    error: false\n    message: false\n    warning: false\n    embed-resources: true\n    toc: true\n    code-fold: false\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1)\nn_points <- 50  # Number of points to use in both parts\nsigma <- 2 # Standard deviation for rnorm\naver <- 0\n\n# Generate the tibble using n_points and sigma\nwd_gaussian <- tibble(\n    index = 1:n_points,\n    y = rnorm(n_points, mean = aver, sd = sigma)\n) |> \n  as_tsibble(index = index) |>\n  mutate(\n  density = dnorm(y, mean = aver, sd = sigma))\n\n\n# Plot the first tibble\nwd_gaussian |> \n    ggplot(aes(x = index, y = y)) + \n    geom_line() +\n    theme_bw() +\n    ggtitle(\"Generated White Noise Series\")\n```\n\n::: {.cell-output-display}\n![](chapter_4_lesson_1_code_notes_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 2. Calculate and print the mean and variance\nsample_mean <- mean(wd_gaussian$y)\nsample_variance <- var(wd_gaussian$y)\ncat(\"Estimated Mean:\", sample_mean, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEstimated Mean: 0.2008966 \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Estimated Variance:\", sample_variance, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nEstimated Variance: 2.764863 \n```\n\n\n:::\n\n```{.r .cell-code}\n# 3. Plot the Autocorrelation Function (ACF)\nacf_plot <- wd_gaussian |>\n  ACF(y, type = \"correlation\") |>\n  autoplot() +\n  ggtitle(\"Autocorrelation Function of White Noise\") +\n  theme_bw()\n\n\n# Plot the histogram using the data from wd_gaussian\nhist_plot <- wd_gaussian |>\n    ggplot(aes(x = y)) +\n    geom_histogram(aes(y = after_stat(density)),\n        color = \"white\", fill = \"darkgrey\", bins = 10) +\n    geom_line(aes(x = y, y = density)) +\n    theme_bw() +\n  ggtitle(\"Histogram with Theoretical Normal Density Curve\")\n\n\nacf_plot\n```\n\n::: {.cell-output-display}\n![](chapter_4_lesson_1_code_notes_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n\n```{.r .cell-code}\nhist_plot\n```\n\n::: {.cell-output-display}\n![](chapter_4_lesson_1_code_notes_files/figure-html/unnamed-chunk-2-3.png){width=672}\n:::\n:::\n\n\n\n\n# resource coe 4.2.3 \"Simulation in R\" Modern look\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set seed for reproducibility of random numbers\nset.seed(1)\n\n# Generate a tibble with 100 random values from N(0, 1)\nwd_gaussian <- tibble(\n    x = 1:100,                      # Sequence from 1 to 100\n    y = rnorm(100)                  # Generate 100 random values with mean 0, sd 1\n)\n\n# Plot the generated time series data as a line plot\nwd_gaussian |> ggplot(aes(x = x, y = y)) + \n    geom_line()\n```\n\n::: {.cell-output-display}\n![](chapter_4_lesson_1_code_notes_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Create another tibble with data for histogram\nxd <- tibble(\n    x = seq(-3, 3, length = 1000),  # 1,000 evenly spaced numbers between -3 and 3\n    norm = rnorm(1000),             # Generate 1,000 random values from N(0, 1)\n    density = dnorm(x)              # Compute normal distribution density for x\n)\n\n# Plot histogram of random values with density curve\nxd |>\n    ggplot(aes(x = norm)) +\n    geom_histogram(aes(y = after_stat(density)), # Histogram with density scaling\n                   color = \"white\", fill = \"darkgrey\") +\n    geom_line(aes(x = x, y = density)) +         # Overlay normal density curve\n    theme_bw()                                   # Apply clean theme to plot\n```\n\n::: {.cell-output-display}\n![](chapter_4_lesson_1_code_notes_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n:::\n\n\n\n\n\n\n## homework 4 question 3.a\n\nthis is sample code given by ai that uses an rexp function which we dont use but it does appear once in the book for one of the practice problems. I decided not to use it and show more of the math being done on the code\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#| include: false\nset.seed(42)\n\n# Parameters\nlambda <- 1\nn <- 500\n\n# Simulate white noise using the exponential distribution\ns_t <- rexp(n, rate = lambda)\nw_t <- s_t - lambda\n\n# Plot the simulation\nlibrary(ggplot2)\n\ndf <- data.frame(Time = 1:n, White_Noise = w_t)\nggplot(df, aes(x = Time, y = White_Noise)) +\n  geom_line(color = \"blue\") +\n  theme_minimal() +\n  labs(\n    title = \"Simulated White Noise Process Using Exponential Distribution\",\n    x = \"Time\",\n    y = expression(w[t])\n  )\n```\n\n::: {.cell-output-display}\n![](chapter_4_lesson_1_code_notes_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n# hw 3.b\n\nthis was the code that was giving me the high density error for exponential white noise, I swap the dexp with dnorm and it produce a plot similar to that of the class png sample. but I dont think it is right because the class pdf expo line expands out like a normal distribution and the one that produce a similar one has the expo line start near -0.8. \n\nswap this one\n  mutate(density = dexp(w_t + lambda, rate = lambda))\n  \n  \nwith this one\nmutate(density = dnorm(w_t, mean = aver, sd = sigma))\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# this was the code that was giving me the high density error for exponential white noise\n# Set up the environment\nset.seed(1)\n\n# Step 1: Parameters for Gaussian White Noise (from Question 1)\nn_points <- 50    # Number of points used previously for Gaussian white noise\nsigma <- 2        # Standard deviation\naver <- 0         # Mean for Gaussian white noise\n\n# Generate Gaussian white noise data\nwd_gaussian <- tibble(\n  index = 1:n_points,\n  y = rnorm(n_points, mean = aver, sd = sigma)\n) |>\n  mutate(\n  density = dnorm(y, mean = aver, sd = sigma))\n\n# Step 2: Parameters for Exponential White Noise (from Question 3a)\nset.seed(1)\nn_exp_points <- 500  # Number of points for Exponential white noise\nlambda <- 1          # The rate parameter\n\n# Generate Exponential white noise data\ns_t <- rexp(n_exp_points, rate = lambda)\nwd_exp <- tibble(\n  index = 1:n_exp_points,\n  w_t = s_t - lambda\n) |> \n  mutate(density = dexp(w_t + lambda, rate = lambda))\n  \n\n# Step 3: Convert to regular tibbles and prepare for merging\ngaussian_df <- wd_gaussian |> \n  mutate(type = \"Gaussian White Noise\", value = y) |> \n  select(type, value, density)\n\nexp_df <- wd_exp |> \n  mutate(type = \"Exponential White Noise\", value = w_t) |> \n  select(type, value, density)\n\n# Step 4: Combine both datasets for plotting\ncombined_data <- bind_rows(gaussian_df, exp_df)\n\n# Step 5: Plot superimposed histograms\n\nggplot(combined_data, aes(x = value, fill = type)) +\n  # Plot histograms for both distributions\n  geom_histogram(aes(y = after_stat(density)), alpha = 0.5, position = \"identity\", bins = 20, color = \"black\") +\n  # Add density lines for each distribution\n  geom_line(data = gaussian_df, aes(x = value, y = density, color = type), size = 1) +\n  geom_line(data = exp_df, aes(x = value, y = density, color = type), size = 1) +\n  theme_minimal() +\n  labs(\n    title = \"Comparison of Gaussian vs Exponential White Noise\",\n    x = \"Value\",\n    y = \"Density\"\n  ) +\n  scale_fill_manual(values = c(\"darkgray\", \"lightblue\")) +\n  scale_color_manual(values = c(\"Gaussian White Noise\" = \"blue\", \"Exponential White Noise\" = \"red\")) +\n  theme(\n    legend.title = element_blank(),\n    legend.position = \"top\"\n  )\n```\n\n::: {.cell-output-display}\n![](chapter_4_lesson_1_code_notes_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n# hw 3.c\n\nboth of this code get the same done\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Generate the Exponential DWN simulation (from part a)\nset.seed(1)\nn_exp_points <- 500  # Length of the series\nlambda <- 1          # Rate parameter\n\n# Generate Exponential white noise\ns_t <- rexp(n_exp_points, rate = lambda)\nw_t <- s_t - lambda  # White noise series\n\n# Step 2: Create the Random Walk Series\nrandom_walk <- tibble(\n    index = 1:n_exp_points,\n    x_t = cumsum(w_t)  # Cumulative sum to create the random walk\n) |> \n  as_tsibble(index = index)\n\n# Step 3: Plot the Random Walk Series\nrandom_walk |> \n    ggplot(aes(x = index, y = x_t)) +\n    geom_line(color = \"darkgreen\") +\n    theme_minimal() +\n    ggtitle(\"Random Walk Series Using Exponential DWN Simulation\") +\n    labs(x = \"Time\", y = expression(x[t]))\n```\n\n::: {.cell-output-display}\n![](chapter_4_lesson_1_code_notes_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using the Exponential White Noise series from part a)\n\n# Create the random walk series\nwd_exp <- wd_exp |>\n  mutate(\n    x_t = cumsum(w_t)  # Cumulative sum to create the random walk series\n  )\n\n# Plot the random walk series\nwd_exp |>\n  ggplot(aes(x = index, y = x_t)) +\n  geom_line(color = \"blue\") +\n  theme_minimal() +\n  ggtitle(\"Random Walk Series from Exponential DWN\") +\n  labs(x = \"Time\", y = expression(x[t]))\n```\n\n::: {.cell-output-display}\n![](chapter_4_lesson_1_code_notes_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspacer\n",
    "supporting": [
      "chapter_4_lesson_1_code_notes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}