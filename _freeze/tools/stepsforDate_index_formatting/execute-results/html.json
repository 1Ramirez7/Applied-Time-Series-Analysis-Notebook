{
  "hash": "f43d4bddc945a0a8844d341ee6f52fc9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Steps for formatting Date and Creating Index\"\nsubtitle: \"Code samples\"\nformat: \n  html:\n    error: false\n    message: false\n    warning: false\n    embed-resources: true\n    toc: true\n    code-fold: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n#source(\"common_functions.R\") # should i be using this one?? not a good idea since many of the formulas return different values\n\n# Loading R packages. originally was using common functions but trying not to use\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(tidyverse,\n               tsibble, fable,\n               feasts, tsibbledata,\n               fable.prophet,\n               patchwork,\n               lubridate,\n               rio,\n               ggplot2,\n               kableExtra, tidyquant\n               )\n```\n:::\n\n\n\n\n\nThe following is steps to check in what format the date column is in in a new dataset. Then to convert to DATE format to do time series research\n\n-   **Import Data**:\n\n-   **Check `date` Column Type**:\n\n-   **Convert `date` to Date Format**:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# the rename is for a different df\n\n# Step 1: Import your data\ndf <- read.csv(\"https://byuistats.github.io/timeseries/data/Vessels_Trade_US.csv\") \n# We'll assume the data has a column called 'date' (replace with the actual column name) and a 'value' column\n\n\n# Step 2: Check the structure of the 'date' column to verify its type\nstr(df$date)  # This will show you if the date column is a character, Date, or something else\n\n\n# Convert 'date' column to Date type if it's in character format \n# 2.1 reomve unwanted columns or\ndf1 <- df |>\n  mutate(date = lubridate::mdy(date) # date is date columm name\n         # mdy(date) mdy is current order of date, lubridate will format to ymd. \n       #dplyr::select(-comments) # remove unwanted columns\n         ) |>\n  rename(x = constructionequip_ord, y = constructionequip_ship) # rename columns\n\n# 2.1 Convert 'Date' column to yearquarter format\ndf$Date <- lubridate::ymd(df$Date) # df2\n\n\n\n# Verify the 'date' column is now in the correct format (should be Date type)\nstr(df$date)  # Should now return 'date'\n```\n:::\n\n\n\n**Doing mutate by getting weekly average**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set symbol and date range for Apple\nsymbol <- \"AAPL\"\ndate_start <- \"2022-01-01\"\ndate_end <- \"2024-01-01\"\n\n# Download the stock data\nstock_df <- tq_get(symbol, from = date_start, to = date_end, get = \"stock.prices\")\n\n# Convert to a tsibble\nstock_ts <- stock_df %>%\n  mutate(dates = lubridate::ymd(date), value = adjusted) %>%\n  mutate(year_week = yearweek(dates)) |>\n  group_by(year_week) |>\n  summarise(value = mean(value)) |>\n  ungroup() |>\n  as_tsibble(index = year_week)\n\n# Time plot of the daily closing prices\nautoplot(stock_ts, value) +\n  labs(title = \"Time Plot of Apple (AAPL) Daily Closing Prices\",\n       x = \"Date\", y = \"Closing Price (USD)\")\n```\n\n::: {.cell-output-display}\n![](stepsforDate_index_formatting_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nthe code below was taken from project one, made to plot the time series without doing the monthly mean. The first two lines of code are missing\n\ndata is for daily data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# this code is also not complete\n\n\n# the first 2 ts can almost be taken from the previous code.\n# this code was first use but replace by the above code\n\n  dplyr::select(dates, year, months, value)  |> # ts3\n  arrange(dates) |> # ts4\n  mutate(index = tsibble::yearmonth(dates)) |> # ts5\n  as_tsibble(index = index) |> # ts6\n  dplyr::select(index, dates, year, months, value) |> # ts7\n  rename(Vessels = value) # rename value to emphasize data context\nvessels_ts |> #ts8\n  autoplot(.vars = Vessels) +\n  labs(\n    x = \"Month\",\n    y = \"Vessels Cleared Monthly\",\n    title = \"Vessels Cleared Monthly in Foreing Trade for United Sates\"\n  ) +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n```\n:::\n\n\n\n# working with two variables and period column\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# I think this file is all for samples, and I edit them so now the code is all mix up hence all the eval=false! sucks \n\ndf <- rio::import(\"https://byuistats.github.io/timeseries/data/constructionequip_manu_orders_shipments.csv\")\n\n# str(df$date)\n\n\ndf1 <- df |>\n  mutate(date = lubridate::mdy(date),\n         constructionequip_ord = as.numeric(constructionequip_ord), # make sure numeric for x variables\n         constructionequip_ship = as.numeric(constructionequip_ship)\n         ) |>\n  rename(x = constructionequip_ord, y = constructionequip_ship) |> # renames columns and converts to numeric\n  select(date, x, y) # re orders and or removes not selected columns\n  \ndf2 <- df1 |> # this makes a new df so either df before or this one is use. \n  mutate(obs = row_number()) |> # makes new column with periods\n  select(obs, x, y)\n\n# can the obs code to make multiple df with different columns. \n```\n:::\n\n\n\n# data has gaps\n\nTyson notes\n\n1.  filling with previous variable\n    1.  Then there is 100% correlation with the previous variable\n2.  Filling with average\n    1.  some data's average, like weather can vary so it can trow off random,\n    2.  using the same variable as last year is an option, it will just mess with the seasonality\n3.  taking the sum of the lag and lead periods, and divide by two to replace missing\n    1.  its a good one\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf0 <- rio::import(\"https://byuistats.github.io/timeseries/data/UNRATENSA.csv\") |>\n    mutate(YM = yearmonth(lubridate::mdy(date)))\ndf <- as_tsibble(df0, index = YM) |>\n  select(ym, cdebt)\ninterval(df) # gives interval: M, D ot Y etc\nhas_gaps(df) # false if none and vice versa True\n```\n:::\n\n\n\n# Reading different file formats\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# wine_dat <- read_table(\"data/wine.dat\") # resource 3.4.2\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}